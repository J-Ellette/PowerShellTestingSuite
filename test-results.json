{
  "violations": [
    {
      "Name": "InsecureHashAlgorithms",
      "Message": "Insecure hash algorithm 'MD5' detected. Use SHA-256 or higher.",
      "Description": null,
      "Severity": 3,
      "LineNumber": 4,
      "Code": "Get-FileHash -Path \"file.txt\" -Algorithm MD5",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/all-violations.ps1",
      "RuleId": "InsecureHashAlgorithms",
      "Metadata": {}
    },
    {
      "Name": "InsecureHashAlgorithms",
      "Message": "Insecure hash algorithm 'SHA1' detected. Use SHA-256 or higher.",
      "Description": null,
      "Severity": 3,
      "LineNumber": 18,
      "Code": "Get-FileHash -Path \"data.bin\" -Algorithm SHA1",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/all-violations.ps1",
      "RuleId": "InsecureHashAlgorithms",
      "Metadata": {}
    },
    {
      "Name": "CredentialExposure",
      "Message": "Plaintext password conversion detected. Use Read-Host -AsSecureString instead.",
      "Description": null,
      "Severity": 4,
      "LineNumber": 7,
      "Code": "ConvertTo-SecureString \"Password123\" -AsPlainText -Force",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/all-violations.ps1",
      "RuleId": "CredentialExposure",
      "Metadata": {}
    },
    {
      "Name": "CommandInjection",
      "Message": "Potential command injection via Invoke-Expression with variables",
      "Description": null,
      "Severity": 4,
      "LineNumber": 11,
      "Code": "Invoke-Expression $cmd",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/all-violations.ps1",
      "RuleId": "CommandInjection",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 1,
      "Code": "# Test script with multiple types of violations\n\n# Insecure hash algorithm\n$hash = Get-FileHash -Path \"file.txt\" -Algorithm MD5\n\n# Credential exposure\n$pass = ConvertTo-SecureString \"Password123\" -AsPlainText -Force\n\n# Command injection\n$cmd = Read-Host \"Command\"\nInvoke-Expression $cmd\n\n# Certificate bypass\n[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }\n\n# More violations\n$apiKey = \"hardcoded-api-key-secret\"\n$sha1Hash = Get-FileHash -Path \"data.bin\" -Algorithm SHA1\n\nWrite-Host \"This script intentionally contains multiple security violations for testing purposes\"\n",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/all-violations.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 4,
      "Code": "$hash = Get-FileHash -Path \"file.txt\" -Algorithm MD5\n\n# Credential exposure\n$pass = ConvertTo-SecureString \"Password123\" -AsPlainText -Force\n\n# Command injection\n$cmd = Read-Host \"Command\"\nInvoke-Expression $cmd\n\n# Certificate bypass\n[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }\n\n# More violations\n$apiKey = \"hardcoded-api-key-secret\"\n$sha1Hash = Get-FileHash -Path \"data.bin\" -Algorithm SHA1\n\nWrite-Host \"This script intentionally contains multiple security violations for testing purposes\"",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/all-violations.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 14,
      "Code": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/all-violations.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    null,
    null,
    null,
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 1,
      "Code": "# Test script with certificate validation bypass violations\n\n# Violation 1: Certificate callback that always returns true\n[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }\n\n# Violation 2: Disabling certificate revocation check\n[System.Net.ServicePointManager]::CheckCertificateRevocationList = $false\n\n# Violation 3: Certificate validation bypass in function\nfunction Skip-CertificateValidation {\n    [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { return $true }\n}\n\n# Correct usage (should not trigger violation)\n# Proper certificate validation would implement actual checks\n[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {\n    param($sender, $certificate, $chain, $sslPolicyErrors)\n    \n    # Implement proper validation logic here\n    if ($sslPolicyErrors -eq [System.Net.Security.SslPolicyErrors]::None) {\n        return $true\n    }\n    \n    # Additional validation logic\n    return $false\n}\n",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/certificate-bypass.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 4,
      "Code": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }\n\n# Violation 2: Disabling certificate revocation check\n[System.Net.ServicePointManager]::CheckCertificateRevocationList = $false\n\n# Violation 3: Certificate validation bypass in function\nfunction Skip-CertificateValidation {\n    [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { return $true }\n}\n\n# Correct usage (should not trigger violation)\n# Proper certificate validation would implement actual checks\n[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {\n    param($sender, $certificate, $chain, $sslPolicyErrors)\n    \n    # Implement proper validation logic here\n    if ($sslPolicyErrors -eq [System.Net.Security.SslPolicyErrors]::None) {\n        return $true\n    }\n    \n    # Additional validation logic\n    return $false\n}",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/certificate-bypass.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 4,
      "Code": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/certificate-bypass.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 10,
      "Code": "function Skip-CertificateValidation {\n    [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { return $true }\n}",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/certificate-bypass.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 10,
      "Code": "{\n    [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { return $true }\n}",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/certificate-bypass.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 11,
      "Code": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { return $true }",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/certificate-bypass.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 11,
      "Code": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { return $true }",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/certificate-bypass.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    {
      "Name": "CertificateValidation",
      "Message": "Certificate validation bypass detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 16,
      "Code": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {\n    param($sender, $certificate, $chain, $sslPolicyErrors)\n    \n    # Implement proper validation logic here\n    if ($sslPolicyErrors -eq [System.Net.Security.SslPolicyErrors]::None) {\n        return $true\n    }\n    \n    # Additional validation logic\n    return $false\n}",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/certificate-bypass.ps1",
      "RuleId": "CertificateValidation",
      "Metadata": {}
    },
    null,
    null,
    {
      "Name": "CommandInjection",
      "Message": "Potential command injection via Invoke-Expression with variables",
      "Description": null,
      "Severity": 4,
      "LineNumber": 5,
      "Code": "Invoke-Expression $userInput",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/command-injection.ps1",
      "RuleId": "CommandInjection",
      "Metadata": {}
    },
    {
      "Name": "CommandInjection",
      "Message": "Potential command injection via Invoke-Expression with variables",
      "Description": null,
      "Severity": 4,
      "LineNumber": 9,
      "Code": "iex $command",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/command-injection.ps1",
      "RuleId": "CommandInjection",
      "Metadata": {}
    },
    {
      "Name": "CommandInjection",
      "Message": "Potential command injection via Invoke-Expression with variables",
      "Description": null,
      "Severity": 4,
      "LineNumber": 13,
      "Code": "Invoke-Expression $scriptBlock",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/command-injection.ps1",
      "RuleId": "CommandInjection",
      "Metadata": {}
    },
    null,
    null,
    {
      "Name": "CredentialExposure",
      "Message": "Plaintext password conversion detected. Use Read-Host -AsSecureString instead.",
      "Description": null,
      "Severity": 4,
      "LineNumber": 4,
      "Code": "ConvertTo-SecureString \"MyPassword123!\" -AsPlainText -Force",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/credential-exposure.ps1",
      "RuleId": "CredentialExposure",
      "Metadata": {}
    },
    {
      "Name": "CredentialExposure",
      "Message": "Plaintext password conversion detected. Use Read-Host -AsSecureString instead.",
      "Description": null,
      "Severity": 4,
      "LineNumber": 8,
      "Code": "ConvertTo-SecureString \"DatabasePassword!\" -AsPlainText -Force",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/credential-exposure.ps1",
      "RuleId": "CredentialExposure",
      "Metadata": {}
    },
    null,
    null,
    {
      "Name": "InsecureHashAlgorithms",
      "Message": "Insecure hash algorithm 'MD5' detected. Use SHA-256 or higher.",
      "Description": null,
      "Severity": 3,
      "LineNumber": 4,
      "Code": "Get-FileHash -Path \"C:\\temp\\file.txt\" -Algorithm MD5",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/insecure-hash.ps1",
      "RuleId": "InsecureHashAlgorithms",
      "Metadata": {}
    },
    {
      "Name": "InsecureHashAlgorithms",
      "Message": "Insecure hash algorithm 'SHA1' detected. Use SHA-256 or higher.",
      "Description": null,
      "Severity": 3,
      "LineNumber": 7,
      "Code": "Get-FileHash -Path \"C:\\temp\\another.txt\" -Algorithm SHA1",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/insecure-hash.ps1",
      "RuleId": "InsecureHashAlgorithms",
      "Metadata": {}
    },
    {
      "Name": "InsecureHashAlgorithms",
      "Message": "Direct usage of insecure hash algorithm class detected",
      "Description": null,
      "Severity": 3,
      "LineNumber": 10,
      "Code": "[System.Security.Cryptography.MD5]",
      "FilePath": "/home/runner/work/PowerShellTestingSuite/PowerShellTestingSuite/tests/TestScripts/insecure-hash.ps1",
      "RuleId": "InsecureHashAlgorithms",
      "Metadata": {}
    },
    null,
    null,
    null
  ],
  "summary": {
    "TopIssues": [
      {
        "Rule": "CertificateValidation",
        "Count": 11
      },
      {
        "Rule": "InsecureHashAlgorithms",
        "Count": 5
      },
      {
        "Rule": "CommandInjection",
        "Count": 4
      },
      {
        "Rule": "CredentialExposure",
        "Count": 3
      }
    ],
    "BySeverity": {
      "High": 16,
      "Medium": 0,
      "Low": 0,
      "Critical": 7
    },
    "ByCategory": {
      "InsecureHashAlgorithms": 5,
      "CommandInjection": 4,
      "CredentialExposure": 3,
      "CertificateValidation": 11
    },
    "TotalFiles": 5,
    "TotalViolations": 23
  },
  "metadata": {
    "version": "1.0.0",
    "repository": "J-Ellette/PowerShellTestingSuite",
    "timestamp": "2025-10-23T13:34:25Z",
    "sha": "test",
    "ref": "refs/heads/copilot/implement-phase-1"
  }
}
