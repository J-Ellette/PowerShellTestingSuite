name: PSTS - PowerShell Security Analysis

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      severity_threshold:
        description: 'Minimum severity level to report'
        required: false
        default: 'Medium'
        type: choice
        options:
        - Low
        - Medium
        - High
        - Critical

env:
  PSTS_VERSION: '1.0.0'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest

    outputs:
      violations-count: ${{ steps.analyze.outputs.violations-count }}
      critical-count: ${{ steps.analyze.outputs.critical-count }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup PowerShell
      shell: pwsh
      run: |
        $PSVersionTable
        Write-Host "PowerShell is ready"

    - name: Run Security Analysis
      id: analyze
      shell: pwsh
      run: |
        # Import the analyzer module
        Import-Module ./src/PowerShellSecurityAnalyzer.psm1 -Force
        
        # Run analysis on the workspace
        Write-Host "Starting PSTS security analysis..."
        $result = Invoke-WorkspaceAnalysis -WorkspacePath "."
        
        Write-Host "Analysis completed. Files analyzed: $($result.FilesAnalyzed)"
        Write-Host "Total violations: $($result.TotalViolations)"
        
        # Filter by severity if specified
        $severityThreshold = '${{ github.event.inputs.severity_threshold || 'Medium' }}'
        Write-Host "Severity threshold: $severityThreshold"
        
        $allViolations = @()
        foreach ($fileResult in $result.Results) {
          $allViolations += $fileResult.Violations
        }
        
        $filteredViolations = $allViolations | Where-Object { 
          $severityValue = switch ($_.Severity.ToString()) {
            'Low' { 1 }
            'Medium' { 2 }
            'High' { 3 }
            'Critical' { 4 }
          }
          $thresholdValue = switch ($severityThreshold) {
            'Low' { 1 }
            'Medium' { 2 }
            'High' { 3 }
            'Critical' { 4 }
          }
          $severityValue -ge $thresholdValue
        }
        
        $criticalCount = @($filteredViolations | Where-Object { $_.Severity -eq 'Critical' }).Count
        $totalCount = $filteredViolations.Count
        
        Write-Host "Violations after filtering: $totalCount"
        Write-Host "Critical violations: $criticalCount"
        
        # Prepare export data
        $exportData = @{
          metadata = @{
            version = '${{ env.PSTS_VERSION }}'
            timestamp = Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ'
            repository = '${{ github.repository }}'
            ref = '${{ github.ref }}'
            sha = '${{ github.sha }}'
          }
          summary = $result.Summary
          violations = $filteredViolations
        }
        
        # Export results
        $exportData | ConvertTo-Json -Depth 10 | Out-File -FilePath 'psts-results.json' -Encoding UTF8
        Write-Host "Results exported to psts-results.json"
        
        # Generate SARIF
        . ./scripts/Convert-ToSARIF.ps1
        Convert-ToSARIF -InputFile 'psts-results.json' -OutputFile 'psts-results.sarif'
        
        # Generate human-readable report
        . ./scripts/Generate-SecurityReport.ps1
        Generate-SecurityReport -InputFile 'psts-results.json' -OutputFile 'security-report.md'
        
        # Set outputs
        "violations-count=$totalCount" >> $env:GITHUB_OUTPUT
        "critical-count=$criticalCount" >> $env:GITHUB_OUTPUT
        
        # Display summary
        Write-Host ""
        Write-Host "=== PSTS Analysis Summary ==="
        Write-Host "Total Violations: $totalCount"
        Write-Host "Critical: $criticalCount"
        Write-Host "High: $(@($filteredViolations | Where-Object { $_.Severity -eq 'High' }).Count)"
        Write-Host "Medium: $(@($filteredViolations | Where-Object { $_.Severity -eq 'Medium' }).Count)"
        Write-Host "Low: $(@($filteredViolations | Where-Object { $_.Severity -eq 'Low' }).Count)"
        
        # Exit with error if critical issues found
        if ($criticalCount -gt 0) {
          Write-Error "‚ùå Found $criticalCount critical security violations"
          exit 1
        } elseif ($totalCount -gt 0) {
          Write-Warning "‚ö†Ô∏è Found $totalCount security violations"
        } else {
          Write-Host "‚úÖ No security violations found!"
        }

    - name: Upload SARIF Results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: psts-results.sarif
        category: 'PSTS-Security-Analysis'

    - name: Upload Analysis Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: psts-analysis-results
        path: |
          psts-results.json
          psts-results.sarif
          security-report.md
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read report if it exists
          let reportContent = '';
          try {
            reportContent = fs.readFileSync('security-report.md', 'utf8');
          } catch (error) {
            reportContent = '## PSTS Security Analysis\n\nAnalysis failed or no report generated.';
          }
          
          const violations = '${{ steps.analyze.outputs.violations-count }}';
          const critical = '${{ steps.analyze.outputs.critical-count }}';
          
          // Generate summary comment
          let comment = `## üîí PSTS Security Analysis Results\n\n`;
          
          if (critical > 0) {
            comment += `‚ö†Ô∏è **${critical} Critical Security Issues Found!**\n\n`;
          } else if (violations > 0) {
            comment += `‚úÖ No critical issues, but ${violations} other violations found\n\n`;
          } else {
            comment += `‚úÖ No security violations found!\n\n`;
          }
          
          comment += `### Summary\n`;
          comment += `- **Total Violations:** ${violations}\n`;
          comment += `- **Critical Issues:** ${critical}\n`;
          comment += `\n`;
          
          if (violations > 0) {
            comment += `<details>\n<summary>üìä View Full Report</summary>\n\n`;
            comment += reportContent;
            comment += `\n</details>\n\n`;
          }
          
          comment += `\nüìä [View in Security Tab](https://github.com/${{ github.repository }}/security/code-scanning)\n`;
          
          if (critical > 0) {
            comment += `\n‚ö†Ô∏è **Please address critical security issues before merging.**`;
          }
          
          // Post comment
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  test-analyzer:
    name: Test Analyzer
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Test Security Analyzer
      shell: pwsh
      run: |
        Write-Host "Testing PSTS Security Analyzer..."
        
        # Import module
        Import-Module ./src/PowerShellSecurityAnalyzer.psm1 -Force
        
        # Test on known vulnerable scripts
        $testScripts = Get-ChildItem -Path ./tests/TestScripts -Filter *.ps1
        
        Write-Host "Running tests on $($testScripts.Count) test scripts..."
        
        $totalTestViolations = 0
        foreach ($script in $testScripts) {
          Write-Host "`nTesting: $($script.Name)"
          $result = Invoke-SecurityAnalysis -ScriptPath $script.FullName
          Write-Host "  Violations found: $($result.Violations.Count)"
          $totalTestViolations += $result.Violations.Count
          
          # Display violations
          foreach ($violation in $result.Violations) {
            if ($violation.LineNumber) {
              Write-Host "    - [$($violation.Severity)] $($violation.RuleId) at line $($violation.LineNumber)"
            }
          }
        }
        
        Write-Host "`n=== Test Results ==="
        Write-Host "Total test violations detected: $totalTestViolations"
        
        # Verify we found some violations in test scripts
        if ($totalTestViolations -eq 0) {
          Write-Error "ERROR: No violations found in test scripts. Analyzer may not be working correctly."
          exit 1
        } else {
          Write-Host "‚úÖ Analyzer successfully detected violations in test scripts"
        }
